/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface TrancheFactoryInterface extends ethers.utils.Interface {
  functions: {
    "TRANCHE_CREATION_HASH()": FunctionFragment;
    "deployTranche(uint256,address,address,address)": FunctionFragment;
    "getData()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TRANCHE_CREATION_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployTranche",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "TRANCHE_CREATION_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;

  events: {
    "TrancheCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TrancheCreated"): EventFragment;
}

export class TrancheFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TrancheFactoryInterface;

  functions: {
    TRANCHE_CREATION_HASH(overrides?: CallOverrides): Promise<[string]>;

    "TRANCHE_CREATION_HASH()"(overrides?: CallOverrides): Promise<[string]>;

    deployTranche(
      _expiration: BigNumberish,
      _wpAddress: string,
      _incentiveToken: string,
      _lklStaking: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployTranche(uint256,address,address,address)"(
      _expiration: BigNumberish,
      _wpAddress: string,
      _incentiveToken: string,
      _lklStaking: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getData(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, string, string, string, BigNumber]>;

    "getData()"(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, string, string, string, BigNumber]>;
  };

  TRANCHE_CREATION_HASH(overrides?: CallOverrides): Promise<string>;

  "TRANCHE_CREATION_HASH()"(overrides?: CallOverrides): Promise<string>;

  deployTranche(
    _expiration: BigNumberish,
    _wpAddress: string,
    _incentiveToken: string,
    _lklStaking: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployTranche(uint256,address,address,address)"(
    _expiration: BigNumberish,
    _wpAddress: string,
    _incentiveToken: string,
    _lklStaking: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getData(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string, string, string, string, BigNumber]>;

  "getData()"(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string, string, string, string, BigNumber]>;

  callStatic: {
    TRANCHE_CREATION_HASH(overrides?: CallOverrides): Promise<string>;

    "TRANCHE_CREATION_HASH()"(overrides?: CallOverrides): Promise<string>;

    deployTranche(
      _expiration: BigNumberish,
      _wpAddress: string,
      _incentiveToken: string,
      _lklStaking: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployTranche(uint256,address,address,address)"(
      _expiration: BigNumberish,
      _wpAddress: string,
      _incentiveToken: string,
      _lklStaking: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getData(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, string, string, string, BigNumber]>;

    "getData()"(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, string, string, string, BigNumber]>;
  };

  filters: {
    TrancheCreated(
      trancheAddress: string | null,
      wpAddress: string | null,
      expiration: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    TRANCHE_CREATION_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "TRANCHE_CREATION_HASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployTranche(
      _expiration: BigNumberish,
      _wpAddress: string,
      _incentiveToken: string,
      _lklStaking: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployTranche(uint256,address,address,address)"(
      _expiration: BigNumberish,
      _wpAddress: string,
      _incentiveToken: string,
      _lklStaking: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getData(overrides?: CallOverrides): Promise<BigNumber>;

    "getData()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TRANCHE_CREATION_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TRANCHE_CREATION_HASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployTranche(
      _expiration: BigNumberish,
      _wpAddress: string,
      _incentiveToken: string,
      _lklStaking: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployTranche(uint256,address,address,address)"(
      _expiration: BigNumberish,
      _wpAddress: string,
      _incentiveToken: string,
      _lklStaking: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
