/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface SignaturesValidatorMockInterface extends ethers.utils.Interface {
  functions: {
    "anotherFunction(address)": FunctionFragment;
    "authenticateCall(address)": FunctionFragment;
    "decodeCalldata()": FunctionFragment;
    "getDomainSeparator()": FunctionFragment;
    "getNextNonce(address)": FunctionFragment;
    "increaseNonce(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "anotherFunction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authenticateCall",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeCalldata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNonce",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "anotherFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticateCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseNonce",
    data: BytesLike
  ): Result;

  events: {
    "Authenticated(address,address)": EventFragment;
    "CalldataDecoded(bytes,uint256,uint8,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authenticated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CalldataDecoded"): EventFragment;
}

export class SignaturesValidatorMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SignaturesValidatorMockInterface;

  functions: {
    anotherFunction(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "anotherFunction(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authenticateCall(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authenticateCall(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decodeCalldata(overrides?: Overrides): Promise<ContractTransaction>;

    "decodeCalldata()"(overrides?: Overrides): Promise<ContractTransaction>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "getDomainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    getNextNonce(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNextNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseNonce(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseNonce(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  anotherFunction(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "anotherFunction(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authenticateCall(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authenticateCall(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decodeCalldata(overrides?: Overrides): Promise<ContractTransaction>;

  "decodeCalldata()"(overrides?: Overrides): Promise<ContractTransaction>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  "getDomainSeparator()"(overrides?: CallOverrides): Promise<string>;

  getNextNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNextNonce(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseNonce(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseNonce(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    anotherFunction(user: string, overrides?: CallOverrides): Promise<void>;

    "anotherFunction(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    authenticateCall(user: string, overrides?: CallOverrides): Promise<void>;

    "authenticateCall(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decodeCalldata(overrides?: CallOverrides): Promise<void>;

    "decodeCalldata()"(overrides?: CallOverrides): Promise<void>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    "getDomainSeparator()"(overrides?: CallOverrides): Promise<string>;

    getNextNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNextNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseNonce(user: string, overrides?: CallOverrides): Promise<void>;

    "increaseNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Authenticated(user: null, sender: null): EventFilter;

    CalldataDecoded(
      data: null,
      deadline: null,
      v: null,
      r: null,
      s: null
    ): EventFilter;
  };

  estimateGas: {
    anotherFunction(user: string, overrides?: Overrides): Promise<BigNumber>;

    "anotherFunction(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authenticateCall(user: string, overrides?: Overrides): Promise<BigNumber>;

    "authenticateCall(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decodeCalldata(overrides?: Overrides): Promise<BigNumber>;

    "decodeCalldata()"(overrides?: Overrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "getDomainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNextNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNextNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseNonce(user: string, overrides?: Overrides): Promise<BigNumber>;

    "increaseNonce(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    anotherFunction(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "anotherFunction(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authenticateCall(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authenticateCall(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decodeCalldata(overrides?: Overrides): Promise<PopulatedTransaction>;

    "decodeCalldata()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDomainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseNonce(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseNonce(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
