/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface IPriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "getLargestSafeQueryWindow()": FunctionFragment;
    "getLatest(uint8)": FunctionFragment;
    "getPastAccumulators(tuple[])": FunctionFragment;
    "getTimeWeightedAverage(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLargestSafeQueryWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastAccumulators",
    values: [{variable: BigNumberish; ago: BigNumberish}[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeWeightedAverage",
    values: [{variable: BigNumberish; secs: BigNumberish; ago: BigNumberish}[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLargestSafeQueryWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLatest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPastAccumulators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeWeightedAverage",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPriceOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPriceOracleInterface;

  functions: {
    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLargestSafeQueryWindow()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatest(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLatest(uint8)"(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastAccumulators(
      queries: {variable: BigNumberish; ago: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & {results: BigNumber[]}>;

    "getPastAccumulators(tuple[])"(
      queries: {variable: BigNumberish; ago: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & {results: BigNumber[]}>;

    getTimeWeightedAverage(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & {results: BigNumber[]}>;

    "getTimeWeightedAverage(tuple[])"(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & {results: BigNumber[]}>;
  };

  getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

  "getLargestSafeQueryWindow()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLatest(
    variable: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLatest(uint8)"(
    variable: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastAccumulators(
    queries: {variable: BigNumberish; ago: BigNumberish}[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getPastAccumulators(tuple[])"(
    queries: {variable: BigNumberish; ago: BigNumberish}[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTimeWeightedAverage(
    queries: {variable: BigNumberish; secs: BigNumberish; ago: BigNumberish}[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getTimeWeightedAverage(tuple[])"(
    queries: {variable: BigNumberish; secs: BigNumberish; ago: BigNumberish}[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

    "getLargestSafeQueryWindow()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatest(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLatest(uint8)"(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastAccumulators(
      queries: {variable: BigNumberish; ago: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getPastAccumulators(tuple[])"(
      queries: {variable: BigNumberish; ago: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTimeWeightedAverage(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getTimeWeightedAverage(tuple[])"(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

    "getLargestSafeQueryWindow()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatest(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLatest(uint8)"(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastAccumulators(
      queries: {variable: BigNumberish; ago: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPastAccumulators(tuple[])"(
      queries: {variable: BigNumberish; ago: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeWeightedAverage(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimeWeightedAverage(tuple[])"(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLargestSafeQueryWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLargestSafeQueryWindow()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatest(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLatest(uint8)"(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastAccumulators(
      queries: {variable: BigNumberish; ago: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPastAccumulators(tuple[])"(
      queries: {variable: BigNumberish; ago: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeWeightedAverage(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimeWeightedAverage(tuple[])"(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
