/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface TokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "create(address,string,string,uint8)": FunctionFragment;
    "getTokens(uint256,uint256)": FunctionFragment;
    "getTotalTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokens",
    data: BytesLike
  ): Result;

  events: {
    "TokenCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
}

export class TokenFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenFactoryInterface;

  functions: {
    create(
      admin: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create(address,string,string,uint8)"(
      admin: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTokens(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getTokens(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTotalTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  create(
    admin: string,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create(address,string,string,uint8)"(
    admin: string,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTokens(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getTokens(uint256,uint256)"(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    create(
      admin: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "create(address,string,string,uint8)"(
      admin: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokens(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getTokens(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    TokenCreated(token: string | null): EventFilter;
  };

  estimateGas: {
    create(
      admin: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create(address,string,string,uint8)"(
      admin: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTokens(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokens(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      admin: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create(address,string,string,uint8)"(
      admin: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTokens(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokens(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
