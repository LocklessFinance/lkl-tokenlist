/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface MockWeightedOracleMathInterface extends ethers.utils.Interface {
  functions: {
    "calcLogBPTPrice(uint256,uint256,int256)": FunctionFragment;
    "calcLogSpotPrice(uint256,uint256,uint256,uint256)": FunctionFragment;
    "fromLowResLog(int256)": FunctionFragment;
    "toLowResLog(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcLogBPTPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcLogSpotPrice",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fromLowResLog",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toLowResLog",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcLogBPTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcLogSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromLowResLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toLowResLog",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockWeightedOracleMath extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockWeightedOracleMathInterface;

  functions: {
    calcLogBPTPrice(
      normalizedWeight: BigNumberish,
      balance: BigNumberish,
      bptTotalSupplyLn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcLogBPTPrice(uint256,uint256,int256)"(
      normalizedWeight: BigNumberish,
      balance: BigNumberish,
      bptTotalSupplyLn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcLogSpotPrice(
      normalizedWeightA: BigNumberish,
      balanceA: BigNumberish,
      normalizedWeightB: BigNumberish,
      balanceB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcLogSpotPrice(uint256,uint256,uint256,uint256)"(
      normalizedWeightA: BigNumberish,
      balanceA: BigNumberish,
      normalizedWeightB: BigNumberish,
      balanceB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fromLowResLog(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fromLowResLog(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toLowResLog(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "toLowResLog(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calcLogBPTPrice(
    normalizedWeight: BigNumberish,
    balance: BigNumberish,
    bptTotalSupplyLn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcLogBPTPrice(uint256,uint256,int256)"(
    normalizedWeight: BigNumberish,
    balance: BigNumberish,
    bptTotalSupplyLn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcLogSpotPrice(
    normalizedWeightA: BigNumberish,
    balanceA: BigNumberish,
    normalizedWeightB: BigNumberish,
    balanceB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcLogSpotPrice(uint256,uint256,uint256,uint256)"(
    normalizedWeightA: BigNumberish,
    balanceA: BigNumberish,
    normalizedWeightB: BigNumberish,
    balanceB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fromLowResLog(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fromLowResLog(int256)"(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toLowResLog(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toLowResLog(uint256)"(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calcLogBPTPrice(
      normalizedWeight: BigNumberish,
      balance: BigNumberish,
      bptTotalSupplyLn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcLogBPTPrice(uint256,uint256,int256)"(
      normalizedWeight: BigNumberish,
      balance: BigNumberish,
      bptTotalSupplyLn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLogSpotPrice(
      normalizedWeightA: BigNumberish,
      balanceA: BigNumberish,
      normalizedWeightB: BigNumberish,
      balanceB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcLogSpotPrice(uint256,uint256,uint256,uint256)"(
      normalizedWeightA: BigNumberish,
      balanceA: BigNumberish,
      normalizedWeightB: BigNumberish,
      balanceB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromLowResLog(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fromLowResLog(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toLowResLog(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toLowResLog(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calcLogBPTPrice(
      normalizedWeight: BigNumberish,
      balance: BigNumberish,
      bptTotalSupplyLn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcLogBPTPrice(uint256,uint256,int256)"(
      normalizedWeight: BigNumberish,
      balance: BigNumberish,
      bptTotalSupplyLn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLogSpotPrice(
      normalizedWeightA: BigNumberish,
      balanceA: BigNumberish,
      normalizedWeightB: BigNumberish,
      balanceB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcLogSpotPrice(uint256,uint256,uint256,uint256)"(
      normalizedWeightA: BigNumberish,
      balanceA: BigNumberish,
      normalizedWeightB: BigNumberish,
      balanceB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromLowResLog(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fromLowResLog(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toLowResLog(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toLowResLog(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcLogBPTPrice(
      normalizedWeight: BigNumberish,
      balance: BigNumberish,
      bptTotalSupplyLn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcLogBPTPrice(uint256,uint256,int256)"(
      normalizedWeight: BigNumberish,
      balance: BigNumberish,
      bptTotalSupplyLn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcLogSpotPrice(
      normalizedWeightA: BigNumberish,
      balanceA: BigNumberish,
      normalizedWeightB: BigNumberish,
      balanceB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcLogSpotPrice(uint256,uint256,uint256,uint256)"(
      normalizedWeightA: BigNumberish,
      balanceA: BigNumberish,
      normalizedWeightB: BigNumberish,
      balanceB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromLowResLog(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fromLowResLog(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toLowResLog(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toLowResLog(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
