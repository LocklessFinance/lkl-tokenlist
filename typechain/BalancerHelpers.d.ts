/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface BalancerHelpersInterface extends ethers.utils.Interface {
  functions: {
    "queryExit(bytes32,address,address,tuple)": FunctionFragment;
    "queryJoin(bytes32,address,address,tuple)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "queryExit",
    values: [
      BytesLike,
      string,
      string,
      {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryJoin",
    values: [
      BytesLike,
      string,
      string,
      {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "queryExit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export class BalancerHelpers extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BalancerHelpersInterface;

  functions: {
    queryExit(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queryExit(bytes32,address,address,tuple)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queryJoin(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queryJoin(bytes32,address,address,tuple)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;
  };

  queryExit(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    request: {
      assets: string[];
      minAmountsOut: BigNumberish[];
      userData: BytesLike;
      toInternalBalance: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queryExit(bytes32,address,address,tuple)"(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    request: {
      assets: string[];
      minAmountsOut: BigNumberish[];
      userData: BytesLike;
      toInternalBalance: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queryJoin(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    request: {
      assets: string[];
      maxAmountsIn: BigNumberish[];
      userData: BytesLike;
      fromInternalBalance: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queryJoin(bytes32,address,address,tuple)"(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    request: {
      assets: string[];
      maxAmountsIn: BigNumberish[];
      userData: BytesLike;
      fromInternalBalance: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    queryExit(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {bptIn: BigNumber; amountsOut: BigNumber[]}
    >;

    "queryExit(bytes32,address,address,tuple)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {bptIn: BigNumber; amountsOut: BigNumber[]}
    >;

    queryJoin(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {bptOut: BigNumber; amountsIn: BigNumber[]}
    >;

    "queryJoin(bytes32,address,address,tuple)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {bptOut: BigNumber; amountsIn: BigNumber[]}
    >;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    queryExit(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queryExit(bytes32,address,address,tuple)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    queryJoin(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queryJoin(bytes32,address,address,tuple)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    queryExit(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queryExit(bytes32,address,address,tuple)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        minAmountsOut: BigNumberish[];
        userData: BytesLike;
        toInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queryJoin(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queryJoin(bytes32,address,address,tuple)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      request: {
        assets: string[];
        maxAmountsIn: BigNumberish[];
        userData: BytesLike;
        fromInternalBalance: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
