/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface AaveAssetProxyInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "IncentivesController()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "aToken()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositedAmount()": FunctionFragment;
    "getRewardsInUnderlying()": FunctionFragment;
    "getSharesToUnderlying(uint256)": FunctionFragment;
    "incentiveBalance(address)": FunctionFragment;
    "incentiveFeed()": FunctionFragment;
    "incentiveSupply()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "pool()": FunctionFragment;
    "prefundedDeposit(address)": FunctionFragment;
    "shareSupply()": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlyingDecimals()": FunctionFragment;
    "underlyingFeed()": FunctionFragment;
    "withdraw(address,uint256,uint256)": FunctionFragment;
    "withdrawUnderlying(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IncentivesController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsInUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesToUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prefundedDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnderlying",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsInUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prefundedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnderlying",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class AaveAssetProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AaveAssetProxyInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    IncentivesController(overrides?: CallOverrides): Promise<[string]>;

    "IncentivesController()"(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    aToken(overrides?: CallOverrides): Promise<[string]>;

    "aToken()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfUnderlying(
      _who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfUnderlying(address)"(
      _who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      _destination: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      _destination: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "depositedAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardsInUnderlying(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRewardsInUnderlying()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSharesToUnderlying(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getSharesToUnderlying(uint256)"(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incentiveBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "incentiveBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incentiveFeed(overrides?: CallOverrides): Promise<[string]>;

    "incentiveFeed()"(overrides?: CallOverrides): Promise<[string]>;

    incentiveSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "incentiveSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    prefundedDeposit(
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "prefundedDeposit(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "shareSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlyingDecimals(overrides?: CallOverrides): Promise<[number]>;

    "underlyingDecimals()"(overrides?: CallOverrides): Promise<[number]>;

    underlyingFeed(overrides?: CallOverrides): Promise<[string]>;

    "underlyingFeed()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _destination: string,
      _shares: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,uint256)"(
      _destination: string,
      _shares: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawUnderlying(
      _destination: string,
      _amount: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawUnderlying(address,uint256,uint256)"(
      _destination: string,
      _amount: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  IncentivesController(overrides?: CallOverrides): Promise<string>;

  "IncentivesController()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  aToken(overrides?: CallOverrides): Promise<string>;

  "aToken()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfUnderlying(
    _who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfUnderlying(address)"(
    _who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  deposit(
    _destination: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    _destination: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "depositedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardsInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  "getRewardsInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSharesToUnderlying(
    _shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSharesToUnderlying(uint256)"(
    _shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incentiveBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "incentiveBalance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incentiveFeed(overrides?: CallOverrides): Promise<string>;

  "incentiveFeed()"(overrides?: CallOverrides): Promise<string>;

  incentiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "incentiveSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  prefundedDeposit(
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "prefundedDeposit(address)"(
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "shareSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    spender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    spender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlyingDecimals(overrides?: CallOverrides): Promise<number>;

  "underlyingDecimals()"(overrides?: CallOverrides): Promise<number>;

  underlyingFeed(overrides?: CallOverrides): Promise<string>;

  "underlyingFeed()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _destination: string,
    _shares: BigNumberish,
    _minUnderlying: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,uint256)"(
    _destination: string,
    _shares: BigNumberish,
    _minUnderlying: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawUnderlying(
    _destination: string,
    _amount: BigNumberish,
    _minUnderlying: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawUnderlying(address,uint256,uint256)"(
    _destination: string,
    _amount: BigNumberish,
    _minUnderlying: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    IncentivesController(overrides?: CallOverrides): Promise<string>;

    "IncentivesController()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    aToken(overrides?: CallOverrides): Promise<string>;

    "aToken()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnderlying(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfUnderlying(address)"(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    deposit(
      _destination: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      _destination: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "depositedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardsInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSharesToUnderlying(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSharesToUnderlying(uint256)"(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentiveBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incentiveBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentiveFeed(overrides?: CallOverrides): Promise<string>;

    "incentiveFeed()"(overrides?: CallOverrides): Promise<string>;

    incentiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "incentiveSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    prefundedDeposit(
      _destination: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "prefundedDeposit(address)"(
      _destination: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    shareSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "shareSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlyingDecimals(overrides?: CallOverrides): Promise<number>;

    "underlyingDecimals()"(overrides?: CallOverrides): Promise<number>;

    underlyingFeed(overrides?: CallOverrides): Promise<string>;

    "underlyingFeed()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _destination: string,
      _shares: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "withdraw(address,uint256,uint256)"(
      _destination: string,
      _shares: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdrawUnderlying(
      _destination: string,
      _amount: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "withdrawUnderlying(address,uint256,uint256)"(
      _destination: string,
      _amount: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    IncentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    "IncentivesController()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    aToken(overrides?: CallOverrides): Promise<BigNumber>;

    "aToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnderlying(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfUnderlying(address)"(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _destination: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      _destination: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "depositedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsInUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardsInUnderlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSharesToUnderlying(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSharesToUnderlying(uint256)"(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentiveBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incentiveBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentiveFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "incentiveFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "incentiveSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    prefundedDeposit(
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "prefundedDeposit(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "shareSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlyingDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _destination: string,
      _shares: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,uint256)"(
      _destination: string,
      _shares: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawUnderlying(
      _destination: string,
      _amount: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawUnderlying(address,uint256,uint256)"(
      _destination: string,
      _amount: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IncentivesController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "IncentivesController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "aToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfUnderlying(address)"(
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _destination: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      _destination: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositedAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsInUnderlying(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardsInUnderlying()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSharesToUnderlying(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSharesToUnderlying(uint256)"(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "incentiveBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "incentiveFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentiveSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "incentiveSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prefundedDeposit(
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "prefundedDeposit(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlyingDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingDecimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingFeed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _destination: string,
      _shares: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,uint256)"(
      _destination: string,
      _shares: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawUnderlying(
      _destination: string,
      _amount: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawUnderlying(address,uint256,uint256)"(
      _destination: string,
      _amount: BigNumberish,
      _minUnderlying: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
