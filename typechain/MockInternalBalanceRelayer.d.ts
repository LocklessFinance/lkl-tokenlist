/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface MockInternalBalanceRelayerInterface extends ethers.utils.Interface {
  functions: {
    "depositAndWithdraw(address,address,uint256[],uint256[])": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositAndWithdraw",
    values: [string, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "depositAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export class MockInternalBalanceRelayer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockInternalBalanceRelayerInterface;

  functions: {
    depositAndWithdraw(
      sender: string,
      asset: string,
      depositAmounts: BigNumberish[],
      withdrawAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositAndWithdraw(address,address,uint256[],uint256[])"(
      sender: string,
      asset: string,
      depositAmounts: BigNumberish[],
      withdrawAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;
  };

  depositAndWithdraw(
    sender: string,
    asset: string,
    depositAmounts: BigNumberish[],
    withdrawAmounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositAndWithdraw(address,address,uint256[],uint256[])"(
    sender: string,
    asset: string,
    depositAmounts: BigNumberish[],
    withdrawAmounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    depositAndWithdraw(
      sender: string,
      asset: string,
      depositAmounts: BigNumberish[],
      withdrawAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndWithdraw(address,address,uint256[],uint256[])"(
      sender: string,
      asset: string,
      depositAmounts: BigNumberish[],
      withdrawAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    depositAndWithdraw(
      sender: string,
      asset: string,
      depositAmounts: BigNumberish[],
      withdrawAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositAndWithdraw(address,address,uint256[],uint256[])"(
      sender: string,
      asset: string,
      depositAmounts: BigNumberish[],
      withdrawAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositAndWithdraw(
      sender: string,
      asset: string,
      depositAmounts: BigNumberish[],
      withdrawAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositAndWithdraw(address,address,uint256[],uint256[])"(
      sender: string,
      asset: string,
      depositAmounts: BigNumberish[],
      withdrawAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
