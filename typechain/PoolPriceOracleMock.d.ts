/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface PoolPriceOracleMockInterface extends ethers.utils.Interface {
  functions: {
    "decode(bytes32)": FunctionFragment;
    "encode(tuple)": FunctionFragment;
    "findNearestSamplesTimestamp(uint256[],uint256)": FunctionFragment;
    "getPastAccumulator(uint8,uint256,uint256)": FunctionFragment;
    "getSample(uint256)": FunctionFragment;
    "getTotalSamples()": FunctionFragment;
    "mockSample(uint256,tuple)": FunctionFragment;
    "mockSamples(uint256[],tuple[])": FunctionFragment;
    "processPriceData(uint256,uint256,int256,int256,int256)": FunctionFragment;
    "update(bytes32,int256,int256,int256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "decode", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [
      {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findNearestSamplesTimestamp",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastAccumulator",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSample",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSamples",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSample",
    values: [
      BigNumberish,
      {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSamples",
    values: [
      BigNumberish[],
      {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processPriceData",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findNearestSamplesTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastAccumulator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mockSample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "PriceDataProcessed(bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceDataProcessed"): EventFragment;
}

export class PoolPriceOracleMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolPriceOracleMockInterface;

  functions: {
    decode(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          logPairPrice: BigNumber;
          accLogPairPrice: BigNumber;
          logBptPrice: BigNumber;
          accLogBptPrice: BigNumber;
          logInvariant: BigNumber;
          accLogInvariant: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    "decode(bytes32)"(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          logPairPrice: BigNumber;
          accLogPairPrice: BigNumber;
          logBptPrice: BigNumber;
          accLogBptPrice: BigNumber;
          logInvariant: BigNumber;
          accLogInvariant: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    encode(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "encode(tuple)"(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    findNearestSamplesTimestamp(
      dates: BigNumberish[],
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & {prev: BigNumber; next: BigNumber})[]] & {
        results: ([BigNumber, BigNumber] & {
          prev: BigNumber;
          next: BigNumber;
        })[];
      }
    >;

    "findNearestSamplesTimestamp(uint256[],uint256)"(
      dates: BigNumberish[],
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & {prev: BigNumber; next: BigNumber})[]] & {
        results: ([BigNumber, BigNumber] & {
          prev: BigNumber;
          next: BigNumber;
        })[];
      }
    >;

    getPastAccumulator(
      variable: BigNumberish,
      currentIndex: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPastAccumulator(uint8,uint256,uint256)"(
      variable: BigNumberish,
      currentIndex: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSample(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "getSample(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getTotalSamples(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalSamples()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockSample(
      index: BigNumberish,
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSample(uint256,tuple)"(
      index: BigNumberish,
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSamples(
      indexes: BigNumberish[],
      samples: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSamples(uint256[],tuple[])"(
      indexes: BigNumberish[],
      samples: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    processPriceData(
      elapsed: BigNumberish,
      currentIndex: BigNumberish,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processPriceData(uint256,uint256,int256,int256,int256)"(
      elapsed: BigNumberish,
      currentIndex: BigNumberish,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    update(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          logPairPrice: BigNumber;
          accLogPairPrice: BigNumber;
          logBptPrice: BigNumber;
          accLogBptPrice: BigNumber;
          logInvariant: BigNumber;
          accLogInvariant: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    "update(bytes32,int256,int256,int256,uint256)"(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          logPairPrice: BigNumber;
          accLogPairPrice: BigNumber;
          logBptPrice: BigNumber;
          accLogBptPrice: BigNumber;
          logInvariant: BigNumber;
          accLogInvariant: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;
  };

  decode(
    sample: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  "decode(bytes32)"(
    sample: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  encode(
    sample: {
      logPairPrice: BigNumberish;
      accLogPairPrice: BigNumberish;
      logBptPrice: BigNumberish;
      accLogBptPrice: BigNumberish;
      logInvariant: BigNumberish;
      accLogInvariant: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "encode(tuple)"(
    sample: {
      logPairPrice: BigNumberish;
      accLogPairPrice: BigNumberish;
      logBptPrice: BigNumberish;
      accLogBptPrice: BigNumberish;
      logInvariant: BigNumberish;
      accLogInvariant: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  findNearestSamplesTimestamp(
    dates: BigNumberish[],
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([BigNumber, BigNumber] & {prev: BigNumber; next: BigNumber})[]>;

  "findNearestSamplesTimestamp(uint256[],uint256)"(
    dates: BigNumberish[],
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([BigNumber, BigNumber] & {prev: BigNumber; next: BigNumber})[]>;

  getPastAccumulator(
    variable: BigNumberish,
    currentIndex: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPastAccumulator(uint8,uint256,uint256)"(
    variable: BigNumberish,
    currentIndex: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSample(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  "getSample(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalSamples()"(overrides?: CallOverrides): Promise<BigNumber>;

  mockSample(
    index: BigNumberish,
    sample: {
      logPairPrice: BigNumberish;
      accLogPairPrice: BigNumberish;
      logBptPrice: BigNumberish;
      accLogBptPrice: BigNumberish;
      logInvariant: BigNumberish;
      accLogInvariant: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSample(uint256,tuple)"(
    index: BigNumberish,
    sample: {
      logPairPrice: BigNumberish;
      accLogPairPrice: BigNumberish;
      logBptPrice: BigNumberish;
      accLogBptPrice: BigNumberish;
      logInvariant: BigNumberish;
      accLogInvariant: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSamples(
    indexes: BigNumberish[],
    samples: {
      logPairPrice: BigNumberish;
      accLogPairPrice: BigNumberish;
      logBptPrice: BigNumberish;
      accLogBptPrice: BigNumberish;
      logInvariant: BigNumberish;
      accLogInvariant: BigNumberish;
      timestamp: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSamples(uint256[],tuple[])"(
    indexes: BigNumberish[],
    samples: {
      logPairPrice: BigNumberish;
      accLogPairPrice: BigNumberish;
      logBptPrice: BigNumberish;
      accLogBptPrice: BigNumberish;
      logInvariant: BigNumberish;
      accLogInvariant: BigNumberish;
      timestamp: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  processPriceData(
    elapsed: BigNumberish,
    currentIndex: BigNumberish,
    logPairPrice: BigNumberish,
    logBptPrice: BigNumberish,
    logInvariant: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processPriceData(uint256,uint256,int256,int256,int256)"(
    elapsed: BigNumberish,
    currentIndex: BigNumberish,
    logPairPrice: BigNumberish,
    logBptPrice: BigNumberish,
    logInvariant: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  update(
    sample: BytesLike,
    logPairPrice: BigNumberish,
    logBptPrice: BigNumberish,
    logInvariant: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  "update(bytes32,int256,int256,int256,uint256)"(
    sample: BytesLike,
    logPairPrice: BigNumberish,
    logBptPrice: BigNumberish,
    logInvariant: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  callStatic: {
    decode(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "decode(bytes32)"(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    encode(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "encode(tuple)"(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    findNearestSamplesTimestamp(
      dates: BigNumberish[],
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([BigNumber, BigNumber] & {prev: BigNumber; next: BigNumber})[]>;

    "findNearestSamplesTimestamp(uint256[],uint256)"(
      dates: BigNumberish[],
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([BigNumber, BigNumber] & {prev: BigNumber; next: BigNumber})[]>;

    getPastAccumulator(
      variable: BigNumberish,
      currentIndex: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPastAccumulator(uint8,uint256,uint256)"(
      variable: BigNumberish,
      currentIndex: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSample(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "getSample(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalSamples()"(overrides?: CallOverrides): Promise<BigNumber>;

    mockSample(
      index: BigNumberish,
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSample(uint256,tuple)"(
      index: BigNumberish,
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mockSamples(
      indexes: BigNumberish[],
      samples: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSamples(uint256[],tuple[])"(
      indexes: BigNumberish[],
      samples: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    processPriceData(
      elapsed: BigNumberish,
      currentIndex: BigNumberish,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processPriceData(uint256,uint256,int256,int256,int256)"(
      elapsed: BigNumberish,
      currentIndex: BigNumberish,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "update(bytes32,int256,int256,int256,uint256)"(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  filters: {
    PriceDataProcessed(newSample: null, sampleIndex: null): EventFilter;
  };

  estimateGas: {
    decode(sample: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "decode(bytes32)"(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encode(tuple)"(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findNearestSamplesTimestamp(
      dates: BigNumberish[],
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findNearestSamplesTimestamp(uint256[],uint256)"(
      dates: BigNumberish[],
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastAccumulator(
      variable: BigNumberish,
      currentIndex: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPastAccumulator(uint8,uint256,uint256)"(
      variable: BigNumberish,
      currentIndex: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSample(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSample(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalSamples()"(overrides?: CallOverrides): Promise<BigNumber>;

    mockSample(
      index: BigNumberish,
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSample(uint256,tuple)"(
      index: BigNumberish,
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSamples(
      indexes: BigNumberish[],
      samples: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSamples(uint256[],tuple[])"(
      indexes: BigNumberish[],
      samples: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    processPriceData(
      elapsed: BigNumberish,
      currentIndex: BigNumberish,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processPriceData(uint256,uint256,int256,int256,int256)"(
      elapsed: BigNumberish,
      currentIndex: BigNumberish,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    update(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "update(bytes32,int256,int256,int256,uint256)"(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decode(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decode(bytes32)"(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encode(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encode(tuple)"(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findNearestSamplesTimestamp(
      dates: BigNumberish[],
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findNearestSamplesTimestamp(uint256[],uint256)"(
      dates: BigNumberish[],
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastAccumulator(
      variable: BigNumberish,
      currentIndex: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPastAccumulator(uint8,uint256,uint256)"(
      variable: BigNumberish,
      currentIndex: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSample(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSample(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSamples(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalSamples()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockSample(
      index: BigNumberish,
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSample(uint256,tuple)"(
      index: BigNumberish,
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSamples(
      indexes: BigNumberish[],
      samples: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSamples(uint256[],tuple[])"(
      indexes: BigNumberish[],
      samples: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    processPriceData(
      elapsed: BigNumberish,
      currentIndex: BigNumberish,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processPriceData(uint256,uint256,int256,int256,int256)"(
      elapsed: BigNumberish,
      currentIndex: BigNumberish,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    update(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "update(bytes32,int256,int256,int256,uint256)"(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
