/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface TrancheInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "hitSpeedbump()": FunctionFragment;
    "incentiveRewards()": FunctionFragment;
    "incentiveToken()": FunctionFragment;
    "interestSupply()": FunctionFragment;
    "interestToken()": FunctionFragment;
    "lklStaking()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "pid()": FunctionFragment;
    "position()": FunctionFragment;
    "prefundedDeposit(address)": FunctionFragment;
    "speedbump()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "unlockTimestamp()": FunctionFragment;
    "valueSupplied()": FunctionFragment;
    "withdrawInterest(uint256,address)": FunctionFragment;
    "withdrawPrincipal(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hitSpeedbump",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lklStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(functionFragment: "position", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prefundedDeposit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "speedbump", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueSupplied",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInterest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPrincipal",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hitSpeedbump",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lklStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prefundedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "speedbump", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueSupplied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPrincipal",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "SpeedBumpHit(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpeedBumpHit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Tranche extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TrancheInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hitSpeedbump(overrides?: Overrides): Promise<ContractTransaction>;

    "hitSpeedbump()"(overrides?: Overrides): Promise<ContractTransaction>;

    incentiveRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "incentiveRewards()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    incentiveToken(overrides?: CallOverrides): Promise<[string]>;

    "incentiveToken()"(overrides?: CallOverrides): Promise<[string]>;

    interestSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestToken(overrides?: CallOverrides): Promise<[string]>;

    "interestToken()"(overrides?: CallOverrides): Promise<[string]>;

    lklStaking(overrides?: CallOverrides): Promise<[string]>;

    "lklStaking()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pid()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    position(overrides?: CallOverrides): Promise<[string]>;

    "position()"(overrides?: CallOverrides): Promise<[string]>;

    prefundedDeposit(
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "prefundedDeposit(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    speedbump(overrides?: CallOverrides): Promise<[BigNumber]>;

    "speedbump()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    "underlying()"(overrides?: CallOverrides): Promise<[string]>;

    unlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "unlockTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    valueSupplied(overrides?: CallOverrides): Promise<[BigNumber]>;

    "valueSupplied()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawInterest(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawInterest(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawPrincipal(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawPrincipal(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  deposit(
    _amount: BigNumberish,
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    _amount: BigNumberish,
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hitSpeedbump(overrides?: Overrides): Promise<ContractTransaction>;

  "hitSpeedbump()"(overrides?: Overrides): Promise<ContractTransaction>;

  incentiveRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "incentiveRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  incentiveToken(overrides?: CallOverrides): Promise<string>;

  "incentiveToken()"(overrides?: CallOverrides): Promise<string>;

  interestSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "interestSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  interestToken(overrides?: CallOverrides): Promise<string>;

  "interestToken()"(overrides?: CallOverrides): Promise<string>;

  lklStaking(overrides?: CallOverrides): Promise<string>;

  "lklStaking()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

  position(overrides?: CallOverrides): Promise<string>;

  "position()"(overrides?: CallOverrides): Promise<string>;

  prefundedDeposit(
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "prefundedDeposit(address)"(
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  speedbump(overrides?: CallOverrides): Promise<BigNumber>;

  "speedbump()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    spender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    spender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  unlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "unlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  valueSupplied(overrides?: CallOverrides): Promise<BigNumber>;

  "valueSupplied()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawInterest(
    _amount: BigNumberish,
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawInterest(uint256,address)"(
    _amount: BigNumberish,
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawPrincipal(
    _amount: BigNumberish,
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawPrincipal(uint256,address)"(
    _amount: BigNumberish,
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    deposit(
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hitSpeedbump(overrides?: CallOverrides): Promise<void>;

    "hitSpeedbump()"(overrides?: CallOverrides): Promise<void>;

    incentiveRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "incentiveRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveToken(overrides?: CallOverrides): Promise<string>;

    "incentiveToken()"(overrides?: CallOverrides): Promise<string>;

    interestSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "interestSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestToken(overrides?: CallOverrides): Promise<string>;

    "interestToken()"(overrides?: CallOverrides): Promise<string>;

    lklStaking(overrides?: CallOverrides): Promise<string>;

    "lklStaking()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    position(overrides?: CallOverrides): Promise<string>;

    "position()"(overrides?: CallOverrides): Promise<string>;

    prefundedDeposit(
      _destination: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "prefundedDeposit(address)"(
      _destination: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    speedbump(overrides?: CallOverrides): Promise<BigNumber>;

    "speedbump()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    unlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueSupplied(overrides?: CallOverrides): Promise<BigNumber>;

    "valueSupplied()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInterest(
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "withdrawInterest(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdrawPrincipal(
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawPrincipal(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    SpeedBumpHit(timestamp: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hitSpeedbump(overrides?: Overrides): Promise<BigNumber>;

    "hitSpeedbump()"(overrides?: Overrides): Promise<BigNumber>;

    incentiveRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "incentiveRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveToken(overrides?: CallOverrides): Promise<BigNumber>;

    "incentiveToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "interestSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestToken(overrides?: CallOverrides): Promise<BigNumber>;

    "interestToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    lklStaking(overrides?: CallOverrides): Promise<BigNumber>;

    "lklStaking()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    position(overrides?: CallOverrides): Promise<BigNumber>;

    "position()"(overrides?: CallOverrides): Promise<BigNumber>;

    prefundedDeposit(
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "prefundedDeposit(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    speedbump(overrides?: CallOverrides): Promise<BigNumber>;

    "speedbump()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueSupplied(overrides?: CallOverrides): Promise<BigNumber>;

    "valueSupplied()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInterest(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawInterest(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawPrincipal(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawPrincipal(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hitSpeedbump(overrides?: Overrides): Promise<PopulatedTransaction>;

    "hitSpeedbump()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    incentiveRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "incentiveRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "incentiveToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lklStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lklStaking()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    position(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "position()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prefundedDeposit(
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "prefundedDeposit(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    speedbump(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "speedbump()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unlockTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueSupplied(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "valueSupplied()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawInterest(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawInterest(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawPrincipal(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawPrincipal(uint256,address)"(
      _amount: BigNumberish,
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
